{"version":3,"sources":["../src/index.js"],"names":["Bottle","volume","content","isTargeted","otherBottle","canPour","canFit","amountToPour","some","add","Node","leftBottle","rightBottle","left","right","parent","children","previousAction","hasRoom","leftCopy","copy","fillUp","rightCopy","createChildIfNotTwoEmptyOrFullBottles","isNotEmpty","pourOut","pourOverTo","parents","preConditions","fillLeft","pourLeft","pourFromLeftToRight","pourFromRightToLeft","pourRight","fillRight","story","whatsPossible","child","createChild","bothBottlesFullOrEmpty","push","isFull","isEmpty","howImMade","name","action","actions","node","unshift","sentence","join","finish","that","measure","getTargetedBottle","side","hasBeenTargeted","lastPart","Tree","root","queue","currentNode","shift","console","log","generateChildren","targetLogic","traverseBreadthFirst","sanityCheck","findMeasure","desired","main"],"mappings":"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","sourcesContent":["\"use strict\"\n\nexport class Bottle {\n    constructor(volume) {\n        this.volume = volume\n        this.content = 0\n        // if this bottle has the wanted measure\n        this.isTargeted = false\n    }\n\n    fillUp() {\n        this.content = this.volume\n        return this\n    }\n\n    pourOut() {\n        this.content = 0\n        return this\n    }\n\n    pourOverTo(otherBottle) {\n        const canPour = this.content\n        const canFit = otherBottle.volume - otherBottle.content\n\n        if (canFit == 0 || canPour == 0) return // cant fit anymore or nothing to pour over\n\n        const amountToPour = canFit <= canPour ? canFit : canPour\n        otherBottle.content += amountToPour\n        this.content -= amountToPour\n    }\n\n    hasRoom() {\n        return (this.volume - this.content) > 0\n    }\n\n    isNotEmpty() {\n        return this.content > 0\n    }\n\n    isEmpty() {\n        return this.content == 0\n    }\n\n    isFull() {\n        return this.content == this.volume\n    }\n\n    add(some) { // For test only\n        this.content += some\n        return this\n    }\n\n    take(some) { // For test only\n        this.content -= some\n        return this\n    }\n\n    copy() {\n        return new Bottle(this.volume).add(this.content)\n    }\n\n    hasBeenTargeted() {\n        return this.isTargeted\n    }\n}\n\nexport class Node {\n    constructor(leftBottle, rightBottle) {\n        // if (leftBottle != undefined && rightBottle != undefined)\n        //     console.log(\"left: \" + leftBottle.content + \"| right: \" + rightBottle.content)\n        this.left = leftBottle\n        this.right = rightBottle\n        this.parent = null\n        this.children = []\n        this.previousAction = '\\n  Take two empty bottles of '\n            + leftBottle.volume + ' and ' + rightBottle.volume + ' liters' // The literal beginnings, will be overriten except for root\n    }\n\n    generateChildren2() {\n        if (this.left.hasRoom()) {\n            const leftCopy = this.left.copy().fillUp(),\n                rightCopy = this.right.copy()\n            this.createChildIfNotTwoEmptyOrFullBottles(leftCopy, rightCopy,\n                ' fill up the left bottle (' + leftCopy.content + '|' + rightCopy.content + ')')\n        }\n\n        if (this.left.isNotEmpty()) {\n            const leftCopy = this.left.copy().pourOut(),\n                rightCopy = this.right.copy()\n            this.createChildIfNotTwoEmptyOrFullBottles(leftCopy, rightCopy,\n                ' pour out the left bottle (' + leftCopy.content + '|' + rightCopy.content + ')')\n        }\n\n        if (this.left.isNotEmpty() && this.right.hasRoom()) {\n            const leftCopy = this.left.copy(),\n                rightCopy = this.right.copy()\n            leftCopy.pourOverTo(rightCopy)\n            this.createChildIfNotTwoEmptyOrFullBottles(leftCopy, rightCopy,\n                ' pour from the left bottle to the right bottle (' + leftCopy.content + '|' + rightCopy.content + ')')\n        }\n\n        if (this.right.hasRoom()) {\n            const leftCopy = this.left.copy(),\n                rightCopy = this.right.copy().fillUp()\n            this.createChildIfNotTwoEmptyOrFullBottles(leftCopy, rightCopy,\n                ' fill up the right bottle (' + leftCopy.content + '|' + rightCopy.content + ')')\n        }\n\n        if (this.right.isNotEmpty()) {\n            const leftCopy = this.left.copy(),\n                rightCopy = this.right.copy().pourOut()\n            this.createChildIfNotTwoEmptyOrFullBottles(leftCopy, rightCopy,\n                ' pour out the right bottle (' + leftCopy.content + '|' + rightCopy.content + ')')\n        }\n\n        if (this.right.isNotEmpty() && this.left.hasRoom()) {\n            const leftCopy = this.left.copy(),\n                rightCopy = this.right.copy()\n            rightCopy.pourOverTo(leftCopy)\n            this.createChildIfNotTwoEmptyOrFullBottles(leftCopy, rightCopy,\n                ' pour from the right bottle to the left bottle (' + leftCopy.content + '|' + rightCopy.content + ')')\n        }\n    }\n\n    generateChildren() {\n        const parents = this\n\n        const preConditions = {\n            fillLeft: () => parents.left.hasRoom(),\n            pourLeft: () => parents.left.isNotEmpty(),\n            pourFromLeftToRight: () => parents.left.isNotEmpty() && parents.right.hasRoom(),\n            pourFromRightToLeft: () => parents.right.isNotEmpty() && parents.left.hasRoom(),\n            pourRight: () => parents.right.isNotEmpty(),\n            fillRight: () => parents.right.hasRoom()\n        }\n\n        const story = {\n            fillLeft: () => ' fill up the left bottle ',\n            pourLeft: () => ' pour out the left bottle ',\n            pourFromLeftToRight: () => ' pour from the left bottle to the right bottle ',\n            pourFromRightToLeft: () => ' pour from the right bottle to the left bottle ',\n            pourRight: () => ' pour out the right bottle ',\n            fillRight: () => ' fill up the right bottle '\n        }\n\n        for (const whatsPossible in preConditions) {\n            if (preConditions[whatsPossible]()) {\n                const child = parents.createChild(story[whatsPossible])\n                if (!bothBottlesFullOrEmpty(child)) {\n                    this.children.push(child)\n                }\n            }\n        }\n\n        function bothBottlesFullOrEmpty(child) {\n            return ((child.left.isFull() && child.right.isFull()) ||\n                (child.left.isEmpty() && child.right.isEmpty()))\n        }\n    }\n\n    createChild(howImMade) {\n        const left = this.left.copy(), right = this.left.copy()\n\n        switch (howImMade.name) {\n            case 'fillLeft':\n                left.fillUp()\n                break\n            case 'pourLeft':\n                left.pourOut()\n                break\n            case 'pourFromLeftToRight':\n                left.pourOverTo(right)\n                break\n            case 'pourFromRightToLeft':\n                right.pourOverTo(left)\n                break\n            case 'pourRight':\n                right.pourOut()\n                break\n            case 'fillRight':\n                right.fillUp()\n                break\n        }\n        const child = new Node(left, right)\n        child.parent = this\n        child.previousAction = '  ' + left.content + ' | ' + right.content + '  ' + howImMade()\n        // console.log(child.previousAction)\n        return child\n    }\n    createChildIfNotTwoEmptyOrFullBottles(left, right, action) {\n        if ((left.isEmpty() && right.isEmpty()) ||\n            (left.isFull() && right.isFull()))\n            return // do nothing\n\n        const child = new Node(left, right)\n        child.parent = this\n        child.previousAction = action + '( ' + left.content + ' | ' + right.content + ' )'\n        this.children.push(child)\n    }\n\n    describeActions() {\n        const actions = []\n        let node = this\n        while (node != null) {\n            actions.unshift(node.previousAction)\n            node = node.parent\n        }\n\n        const sentence = actions.join(',\\n')\n        return this.finish(this, sentence)\n    }\n\n    finish(that, sentence) {\n        const measure = that.getTargetedBottle().content\n        const side = this.left.hasBeenTargeted() ? 'left' : 'right'\n        const lastPart = ' and\\n  now you have ' + measure + ' liters in the ' + side + ' bottle!'\n        return sentence + lastPart\n    }\n\n    getTargetedBottle() {\n        if (this.left.hasBeenTargeted())\n            return this.left\n        else\n            return this.right\n    }\n}\n\nexport class Tree {\n    constructor(leftBottle, rightBottle) {\n        this.node = new Node(leftBottle, rightBottle)\n        this.root = this.node\n    }\n\n    traverseBreadthFirst(isTargeted) {\n        const queue = [this.root]               // create queue with root node\n        let currentNode = queue.shift()         // dequeue root node\n\n        while (currentNode) {                   // while node exists\n            if (isTargeted(currentNode)) {           // check if desired node\n                console.log('FOUND IT')\n                return currentNode\n            }\n            for (const child of currentNode.children) {\n                queue.push(child)                   // queque children\n            }\n\n            currentNode = queue.shift()             // take next node\n        }\n    }\n\n    grow() {\n        this.node.generateChildren()\n        return this\n    }\n\n    getNode(targetLogic) {\n        return this.traverseBreadthFirst(targetLogic)\n    }\n}\n\nexport function sanityCheck() { return 'Test is working!' }\n\nexport function findMeasure(desired) {\n    return function (node) {\n        console.log(desired)\n        console.log(node)\n        if (node.left.content == desired) {\n            node.left.isTargeted = true\n            return true\n        } else if (node.right.content == desired) {\n            node.right.isTargeted = true\n            return true\n        } else {\n            node.generateChildren()\n            return false // and keep looking\n        }\n    }\n}\n\n// export function describeActionsFor(leftBottleVolume, rightBottleVolume, measure) {\n//     return new Tree(new Bottle(leftBottleVolume), new Bottle(rightBottleVolume))\n//         .getNode(findMeasure(measure))\n//         .describeActions()\n// }\n\nexport const main = function () {\n    console.log(`\n░░░░░▓███▓\n░░░░▓█████▓\n░░░░▓█████▓\n░░░░░▓███▓\n░░░░░ *;;*\n░░░░░* ;;*                                                     ▓███▓\n░░░░ * ;;*                                                    ▓█████▓\n░░░░* ;;;;*                                                   ▓█████▓\n░░░░▓█████▓                                                    ▓███▓\n░░░░▓█████▓                                                     *;;*\n░░░░▓█████▓                                                    * ;;*\n░░░▓███████▓                                                   * ;;*\n░░▓█████████▓                                                 * ;;;;*\n░▓███████████▓                                                ▓█████▓\n▓█████████████▓                                               ▓█████▓\n▓███░░░░░░░███▓                                              ▓███████▓\n▓███░░░░░░░███▓   /██████████████████████████████████\\\\      ▓█████████▓\n▓███░░░░░░░███▓   █                                  █     ▓███████████▓\n▓███░░░░░░░███▓   █              Hello!              █    ▓█████████████▓\n▓███░░░░░░░███▓   █                                  █    ▓███░░░░░░░███▓\n▓███░░░░░░░███▓   █                                  █    ▓███░░░░░░░███▓\n▓███░░░░░░░███▓   █   Do you want to know the best   █    ▓███░░░░░░░███▓\n▓███░░░░░░░███▓   █    way to measure out 1 and 4    █    ▓███░░░░░░░███▓\n▓███░░░░░░░███▓   █   liters with two bottles of 3   █    ▓███░░░░░░░███▓\n▓███░░░░░░░███▓   █          and 5 liters?           █    ▓███░░░░░░░███▓\n▓███░░░░░░░███▓   █                                  █    ▓███░░░░░░░███▓\n░▓██░░░░░░░██▓░   █                                  █    ░▓██░░░░░░░██▓░\n░░▓█████████▓░    \\\\██████████████████████████████████/     ░▓█████████▓░\n█████████████████████████████████████████████████████████████████████████\n`)\n    console.log(`\n\n\n /████████████████████\\\\\n █                    █\n █   Measure 1 liter  █\n █                    █\n \\\\████████████████████/\n`)\n    // console.log(describeActionsFor(3, 5, 1))\n    console.log(`\n\n\n /█████████████████████\\\\\n █                     █\n █   Measure 4 liters  █\n █                     █\n \\\\█████████████████████/\n`)\n    // console.log(describeActionsFor(3, 5, 4))\n    console.log(`\n\n\n /██████████████████████████████████████████\\\\\n █                                          █\n █   How to measure out 8 liters with two   █\n █    bottles of 1 and 20 liters takes a    █\n █     bit more time to calculate, but      █\n █    I will do it! Just take a few deep    █\n █     breaths while I figure it out...     █\n █                                          █\n \\\\██████████████████████████████████████████/\n`)\n    // console.log(describeActionsFor(1, 17, 8))\n}\n\nmain()"],"file":"index.js"}