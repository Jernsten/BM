{"version":3,"sources":["../test/index.spec.js"],"names":["to","equal","Bottle","be","an","instanceOf","have","ownProperty","volume","property","that","equals","empty","fillUp","bottle","pourOut","bottleCopy","copy","content","fullBottle","emptyBottle","pourOverTo","full","halfFull","halfFullBottle","add","some","someMore","aBottle","anotherBottle","anotherEmptyBottle","otherBottle","volume3","volume5","left","right","node","Node","parent","children","Array","tree","Tree","root","respondTo","push","grow","undefined","pathTo1l","pathTo4l","nodeWith1l","getNode","description1l","describeActions","description4l"],"mappings":"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","sourcesContent":["\"use strict\"\nimport { expect } from 'chai'\nimport { describe, it } from 'mocha'\nimport { sanityCheck, Bottle, Node, Tree, findMeasure } from '../src/index'\n\ndescribe('TEST SUITE', () => {\n    it('Should work', () => {\n        expect(sanityCheck()).to.equal('Test is working!')\n    })\n})\n\ndescribe('BOTTLES', () => {\n    it('Should create a bottle', () => {\n        expect(new Bottle()).to.be.an.instanceOf(Bottle)\n    })\n\n    it('Should have a volume', () => {\n        expect(new Bottle()).to.have.ownProperty('volume')\n    })\n\n    it('Should create a bottle with 3l volume', () => {\n        const volume = 3\n        expect(new Bottle(volume)).to.have.property('volume').that.equals(volume)\n    })\n\n    it('Should have 0l content in bottle', () => {\n        const empty = 0\n        expect(new Bottle()).to.have.property('content').that.equals(empty)\n    })\n\n    it('Should fill bottle to max', () => {\n        const volume = 5\n        expect(new Bottle(volume).fillUp()).to.have.property('content').that.equals(volume)\n    })\n\n    it('Should empty the bottle completely', () => {\n        const volume = 5\n        const bottle = new Bottle(volume).fillUp()\n        expect(bottle.pourOut()).to.have.property('content').that.equals(0)\n    })\n\n    it('Should deep copy bottle object', () => {\n        const bottle = new Bottle(1).fillUp()\n        const bottleCopy = bottle.copy()\n        bottle.pourOut()\n        expect(bottleCopy.content).to.equal(1)\n    })\n})\n\ndescribe('TRANSACTIONS', () => {\n    it('Should transfer all content from one bottle to the other', () => {\n        const volume = 5\n        const fullBottle = new Bottle(volume).fillUp()\n        const emptyBottle = new Bottle(volume)\n\n        fullBottle.pourOverTo(emptyBottle)\n\n        expect(fullBottle.content).to.equal(0)\n        expect(emptyBottle.content).to.equal(volume)\n    })\n\n    it('Should transfer content until other bottle is full', () => {\n        const volume = 4, full = 4, halfFull = 2\n        const fullBottle = new Bottle(volume).fillUp()\n        const halfFullBottle = new Bottle(volume).add(halfFull)\n\n        fullBottle.pourOverTo(halfFullBottle)\n\n        expect(fullBottle.content).to.equal(halfFull)\n        expect(halfFullBottle.content).to.equal(full)\n    })\n\n    it('Should transfer till other bottle is full and keep whats left', () => {\n        const volume = 5\n        let some = 3, someMore = 4\n\n        const aBottle = new Bottle(volume).add(some) // 3\n        const anotherBottle = new Bottle(volume).add(someMore) // 4\n\n        aBottle.pourOverTo(anotherBottle) // give 1 from aBottle to anotherBottle\n\n        expect(aBottle.content).to.equal(--some) // take 1\n        expect(anotherBottle.content).to.equal(++someMore) // give 1\n    })\n\n    it('Should not be able to transfer from empty bottle', () => {\n        const volume = 5\n\n        const emptyBottle = new Bottle(volume)\n        const anotherEmptyBottle = new Bottle(volume)\n\n        emptyBottle.pourOverTo(anotherEmptyBottle)\n\n        expect(emptyBottle.content).to.equal(0)\n        expect(anotherEmptyBottle.content).to.equal(0) // both were empty to begin with, nothing to transfer\n    })\n\n    it('Should empty one bottle to other, none of them are full', () => {\n        const volume = 5\n        let some = 1, someMore = 2\n\n        const aBottle = new Bottle(volume).add(some) //1\n        const otherBottle = new Bottle(volume).add(someMore) //2\n\n        aBottle.pourOverTo(otherBottle)\n\n        expect(aBottle.content).to.equal(--some) // take 1\n        expect(otherBottle.content).to.equal(++someMore) // give 1\n    })\n\n    it('Should not be able to transfer to full bottle', () => {\n        const volume = 5, some = 3\n\n        const aBottle = new Bottle(volume).add(some) // 3\n        const anotherBottle = new Bottle(volume).fillUp() // 5\n\n        aBottle.pourOverTo(anotherBottle)\n\n        expect(aBottle.content).to.equal(some) // 3\n        expect(anotherBottle.content).to.equal(volume) // 5\n    })\n})\n\ndescribe('NODES', () => {\n    it('Should create a Node with two bottles as parameters', () => {\n        const volume3 = 3, volume5 = 5,\n            left = new Bottle(volume3),\n            right = new Bottle(volume5),\n            node = new Node(left, right)\n        expect(node.left).to.be.an.instanceOf(Bottle)\n        expect(node.right).to.be.an.instanceOf(Bottle)\n    })\n\n    it('Should have a parent', () => {\n        const volume3 = 3, volume5 = 5,\n            left = new Bottle(volume3),\n            right = new Bottle(volume5),\n            node = new Node(left, right)\n        expect(node.parent).to.be.null\n    })\n\n    it('Should have children', () => {\n        const volume3 = 3, volume5 = 5,\n            left = new Bottle(volume3),\n            right = new Bottle(volume5),\n            node = new Node(left, right)\n        expect(node.children).to.be.an.instanceOf(Array)\n    })\n})\n\ndescribe('TREE', () => {\n    it('Should create a Tree with root node', () => {\n        const tree = new Tree(new Bottle(3), new Bottle(5))\n        expect(tree.root).to.be.an.instanceOf(Node)\n    })\n\n    it('Should have a root node', () => {\n        const tree = new Tree(new Bottle(3), new Bottle(5))\n        expect(tree.root).to.be.an.instanceOf(Node)\n    })\n\n    it('Should have a traverseBreadthFirst method', () => {\n        const tree = new Tree(new Bottle(3), new Bottle(5))\n        expect(tree).to.respondTo('traverseBreadthFirst')\n    })\n\n    it('Should add a child node to tree root node', () => {\n        const tree = new Tree(new Bottle(3), new Bottle(5))\n        tree.root.children.push(new Node(new Bottle(1), new Bottle(2)))\n        expect(tree.root.children[0]).to.be.an.instanceOf(Node)\n        expect(tree.root.children[0].left.volume).to.equal(1)\n        expect(tree.root.children[0].right.volume).to.equal(2)\n    })\n})\n\ndescribe('GENERATING NODES', () => {\n    it('Should grow and generate children', () => {\n        const left = new Bottle(3), right = new Bottle(5), tree = new Tree(left, right)\n        tree.grow()\n        expect(tree.root.children).to.be.an.instanceOf(Array)\n        expect(tree.root.children[0]).to.be.an.instanceOf(Node) // fill left\n        expect(tree.root.children[1]).to.be.an.instanceOf(Node) // fill right\n        expect(tree.root.children[2]).to.equal(undefined) // only 2 children should be created\n    })\n})\n\ndescribe('SEARCHING', () => {\n\n    const pathTo1l = `\n  Take two empty bottles of 3 and 5 liters,\n fill up the left bottle (3|0),\n pour from the left bottle to the right bottle (0|3),\n fill up the left bottle (3|3),\n pour from the left bottle to the right bottle (1|5) and\n  now you have 1 liters in the left bottle!`\n\n    const pathTo4l = `\n  Take two empty bottles of 3 and 5 liters,\n fill up the right bottle (0|5),\n pour from the right bottle to the left bottle (3|2),\n pour out the left bottle (0|2),\n pour from the right bottle to the left bottle (2|0),\n fill up the right bottle (2|5),\n pour from the right bottle to the left bottle (3|4) and\n  now you have 4 liters in the right bottle!`\n\n    it('Should describe how to get to node with 1 liters', () => {\n        const tree = new Tree(new Bottle(3), new Bottle(5))\n        const nodeWith1l = tree.getNode(findMeasure(1))\n        const description1l = nodeWith1l.describeActions()\n\n        expect(description1l).to.equal(pathTo1l)\n    })\n\n    it('Should measure 4 liters', () => {\n        const tree = new Tree(new Bottle(3), new Bottle(5))\n        const description4l = tree.getNode(findMeasure(4)).describeActions()\n\n        expect(description4l).to.equal(pathTo4l)\n    })\n})"],"file":"index.spec.js"}